//
//  PaymentViewController.swift
//  OneTwoThreeApp
//
//  Created by Orawan Manasombun on 24/6/21.
//  Copyright (c) 2021 2C2P. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PaymentDisplayLogic: AnyObject {
    func displayInitial(viewModel: Payment.Initial.ViewModel)
    func displayDeeplink(viewModel: Payment.StartDeeplink.ViewModel)
    func displayError(viewModel: Payment.Error.ViewModel)
}

class PaymentViewController: BaseViewController, PaymentDisplayLogic {
    
    var interactor: PaymentBusinessLogic?
    var router: (NSObjectProtocol & PaymentRoutingLogic & PaymentDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = PaymentInteractor()
        let presenter = PaymentPresenter()
        let router = PaymentRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureUI()
        doInitial()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        navigationController?.isNavigationBarHidden = false
    }
    
    
    @IBOutlet weak var scbImageView: UIImageView!
    @IBOutlet weak var bayImageView: UIImageView!
    @IBOutlet weak var bblImageView: UIImageView!
    
    @IBOutlet weak var totalPaymentLabel: UILabel!
    @IBOutlet weak var priceLabel: UILabel!
    @IBOutlet weak var payButton: UIButton!
    
    private var product: Product?
    private var paymentMethod: PaymentMethod?
    var imageViews: [UIImageView] = []
    
    
    // MARK: - Configure
    
    private func configureUI() {
        title = "Payment"
        imageViews = [scbImageView, bayImageView, bblImageView]
        // Select 'SBC' By default
        selectPaymentMethod(paymentMethod: .scb)
        priceLabel.text = "à¸¿0"
        totalPaymentLabel.text = "Total Payment"
        payButton.setTitle("Pay", for: .normal)
    }
    
    // MARK: - Initial
    
    func doInitial() {
        let request = Payment.Initial.Request()
        interactor?.doInitial(request: request)
    }
    
    func displayInitial(viewModel: Payment.Initial.ViewModel) {
        product = viewModel.product
        priceLabel.text = product?.formattedPrice
    }
    
    // MARK: - Start Deeplink
    
    func doStartDeeplink() {
        view.showLoading()
        let request = Payment.StartDeeplink.Request(paymentMethod: paymentMethod)
        interactor?.doStartDeeplink(request: request)
    }
    
    func displayDeeplink(viewModel: Payment.StartDeeplink.ViewModel) {
        view.hideLoading()

        if let deeplinkURL = viewModel.response?.deeplinkURL, let url = URL(string: deeplinkURL) {
            UIApplication.shared.open(url) { (result) in
                if result {
                   // The URL was delivered successfully!
                } else {
                    self.showAlertDialog(
                        title: "Unable to open \(self.paymentMethod?.bankName ?? "") app",
                        message: "Please ensure you have the app downloaded on your device."
                    )
                }
            }
        }
    }
    
    // MARK: - Error
    
    func displayError(viewModel: Payment.Error.ViewModel) {
        view.hideLoading()
        showAlertDialog(title: "Error", message: viewModel.error?.localizedDescription)
    }
    
    
    // MARK: - Private
    
    private func selectPaymentMethod(paymentMethod: PaymentMethod) {
        self.paymentMethod = paymentMethod
        
        imageViews.forEach { imageView in
            let selected = imageView.tag == paymentMethod.rawValue
            let color: UIColor = selected ?  Colors.black.value : .clear
            let width: CGFloat = selected ? 4 : 0
            let roundRadius: CGFloat = selected ? 8 : 0
            imageView.addBorder(withColor: color, width: width, roundRadius: roundRadius)
        }
    }
    
    
    // MARK: - Actions
    
    @IBAction func onTouchSBCButton(_ sender: UIButton) {
        selectPaymentMethod(paymentMethod: .scb)
    }
    
    @IBAction func onTouchBAYButton(_ sender: UIButton) {
        selectPaymentMethod(paymentMethod: .bay)
    }
    
    @IBAction func onTouchBBLButton(_ sender: UIButton) {
        selectPaymentMethod(paymentMethod: .bbl)
    }
    
    @IBAction func onTouchPayButton(_ sender: UIButton) {
        doStartDeeplink()
    }
}
